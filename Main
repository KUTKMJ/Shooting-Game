#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
#include <windows.h>


typedef enum { NOCURSOR, SOLIDCURSOR, NORMALCURSOR } CURSOR_TYPE;

void gotoxy(int x, int y);
void DrawPlayer();
void ErasePlayer();
void PlayerMoveAction();
void DrawBullet(int i);
void EraseBullet(int i);
void PlayerBulletAction();
void DrawEnemy();
void EnemyMoveAction();
void MoveEnemyBullet();
void EnemyBulletAction(int i);
void DrawEnemyBullet(int i);
void EraseEnemyBullet(int i);
void EnemyCrash();
void PlayerCrash();
int wherex();
int wherey();
int Player_x;
int Bullet_x;
int Bullet_y;
int Score = 0;
int ch;
void setcursortype(CURSOR_TYPE c);

#define ESC 27
#define random(n) (rand() % (n))
#define EXTENDASCII -32
#define MAXBULLET 3
#define MAXENEMY 15
#define MAXENEMYBULLET 20

#ifndef HEADER_STANDARD

void gotoxy(int x, int y)
{
	COORD Cur;
	Cur.X = x;
	Cur.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Cur);
}

int wherex()
{
	CONSOLE_SCREEN_BUFFER_INFO BufInfo;

	GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &BufInfo);
	return BufInfo.dwCursorPosition.X;
}

int wherey()
{
	CONSOLE_SCREEN_BUFFER_INFO BufInfo;

	GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &BufInfo);
	return BufInfo.dwCursorPosition.Y;
}

void setcursortype(CURSOR_TYPE c)
{
	CONSOLE_CURSOR_INFO CurInfo;

	switch (c) {
	case NOCURSOR:
		CurInfo.dwSize = 1;
		CurInfo.bVisible = FALSE;
		break;
	case SOLIDCURSOR:
		CurInfo.dwSize = 100;
		CurInfo.bVisible = TRUE;
		break;
	case NORMALCURSOR:
		CurInfo.dwSize = 20;
		CurInfo.bVisible = TRUE;
		break;
	}
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &CurInfo);
}

struct {//총알을 관리하는 구조체 배열.
	BOOL exist;
	int x, y;
}Bullet[MAXBULLET];

struct { // 적군을 추출하는 구조체 배열.
	BOOL exist;
	int type;
	int x, y;
	int dest;
	int nFrame;
	int nStay;
}Enemy[MAXENEMY];

struct { // 적군의 총알을 관리하는 구조체 배열.
	BOOL exist;
	int x, y;
	int nFrame;
	int nStay;
}EnemyBullet[MAXENEMYBULLET];

char *arEnemy[] = { "◁◀▽▶▷","─■─","─□─","▒====▒" }; // 적 기체의 디자인.

#endif  








int main(void) { // 메인함수.
	setcursortype(NOCURSOR);
	system("mode:con:lines = 40");
	srand(unsigned (time(NULL)));

	for (;;) {
		PlayerMoveAction();
		PlayerMoveAction();

		DrawEnemy();
		EnemyMoveAction();
		MoveEnemyBullet();

		EnemyCrash();
		PlayerCrash();

		Sleep(10);

	}
	_getch();
	return 0;
}

void DrawPlayer() { // Player의 기체.
	gotoxy(Player_x, 39); 
	printf("─Ⅲ─");
}

void ErasePlayer() { // Player의 기체 지우기.
	gotoxy(Player_x, 39);
	printf("      ");
}

void PlayerMoveAction() { // Player의 조작. space bar가 총알, esc는 종료, 좌 우 무빙.
	int i;
	if (GetAsyncKeyState(VK_LEFT) < 0 && Player_x > 1) {
		ErasePlayer();
		Player_x--;
		DrawPlayer();
	}
	else if (GetAsyncKeyState(VK_RIGHT) < 0 && Player_x < 47) {
		ErasePlayer();
		Player_x++;
		DrawPlayer();
	}
	if (_kbhit()) {
		ch = _getch();
		switch (ch) {
		case ' ':
			for (i = 0; i < MAXBULLET&&Bullet[i].exist == TRUE; i++) { ; }
			if (i != MAXBULLET) {
				Bullet[i].x = Player_x + 3;
				Bullet[i].y = 38;
				Bullet[i].exist = TRUE;
			}
			break; 
		case ESC:
			exit(0);
		}
	}
}

void DrawBullet(int i) { //Player의 총알 그리기.
	gotoxy(Bullet[i].x, Bullet[i].y);
	printf("*");
}

void EraseBullet(int i) { // Player의 총알 지우기
	gotoxy(Bullet[i].x, Bullet[i].y);
	printf(" ");
}

void PlayerBulletAction() {// Player의 총알 움직임.(Bullet_y의 좌표가 0(가장 위쪽 끝)이 되기 전까지 그려나감.
	int i;
	i=0;
	Bullet[i].exist=TRUE;
	for (i = 0; i < MAXBULLET; i++) {
		
		if (Bullet[i].exist == TRUE) {
			EraseBullet(i);
			if (Bullet[i].y == 0)
			{
				Bullet[i].exist = FALSE;
			}
			else {
				Bullet[i].y--;
				DrawBullet(i);
			}
		}
	}
}

void DrawEnemy() { // 적 기체 그리기.(rand() % +1을 random함수로 간단하게 표현)
	BOOL Found;
	int i, j;
	if (random(100) == 0) {
		for (i = 0; i < MAXENEMY&&Enemy[i].exist == TRUE; i++) {
			;
		}
		if (i != MAXENEMY) {
			if (random(2) == 0) {
				Enemy[i].x = 5;
				Enemy[i].dest = 1;
			}
			else {
				Enemy[i].x = 45;
				Enemy[i].dest = -1;
			}
			for (;;) {
				Enemy[i].y = random(10) + 1;
				for (Found = FALSE, j = 0; j < MAXENEMY; j++) {
					if (Enemy[i].exist == TRUE && Enemy[j].y == Enemy[i].y) {
						Found = TRUE;
						break;
					}
				}
				if (Found == FALSE) {
					break;
				}
			}
			Enemy[i].nFrame = Enemy[i].nStay = random(6) + 1;
			Enemy[i].type = random(sizeof(arEnemy)) / sizeof(arEnemy[0]);
			Enemy[i].exist = TRUE;
		}
	}
}

void EnemyMoveAction() { // 적 움직임.
	int i;
	for (i = 0; i < MAXENEMY; i++) {
		if (Enemy[i].exist == FALSE)
			continue;
		if (--Enemy[i].nStay == 0) {
			if (Enemy[i].type == -1) {
				gotoxy(Enemy[i].x - 3, Enemy[i].y);
				printf("           ");
				gotoxy(Enemy[i].x - 3, Enemy[i].y-1);
				printf("           ");
				gotoxy(Enemy[i].x - 3, Enemy[i].y-2);
				printf("           ");				
				Enemy[i].exist = FALSE;
				continue;
			}

			Enemy[i].nStay = Enemy[i].nFrame;

			if (Enemy[i].x>47 || Enemy[i].x < 4) {
				Enemy[i].exist = FALSE;
				gotoxy(Enemy[i].x - 3, Enemy[i].y);
				printf("          ");
			}
			else {
				Enemy[i].x += Enemy[i].dest;
				gotoxy(Enemy[i].x - 3, Enemy[i].y);
				printf(arEnemy[Enemy[i].type]);

				EnemyBulletAction(i);
			}
		}
	}
}

void EnemyBulletAction(int i) { // 적 총알 
	int j;
	if (random(20) == 0) {
		for (j = 0; j < MAXENEMYBULLET && EnemyBullet[j].exist == TRUE; j++) {
			;
		}
		if (j != MAXENEMYBULLET) {
			EnemyBullet[j].x = Enemy[i].x + 2;
			EnemyBullet[j].y = Enemy[i].y + 1;
			EnemyBullet[j].nFrame = Enemy[j].nStay = Enemy[i].nFrame * 6;
			EnemyBullet[j].exist = TRUE;
		}
	}
}

void DrawEnemyBullet(int i) { // 적 총알 그리기.
	gotoxy(EnemyBullet[i].x, EnemyBullet[i].y);
	printf("*");
}

void EraseEnemyBullet(int i) { // 적 총알 지우기.
	gotoxy(EnemyBullet[i].x, EnemyBullet[i].y);
	printf(" ");
}

void MoveEnemyBullet() { // 적 총알 움직임.
	int i;
	for (i = 0; i < MAXBULLET; i++) {
		if (EnemyBullet[i].exist == FALSE)
			continue;
		if (--EnemyBullet[i].nStay == 0) {
			EnemyBullet[i].nStay = EnemyBullet[i].nFrame;
			EraseEnemyBullet(i);

			if (EnemyBullet[i].y > 38) {
				EnemyBullet[i].exist = FALSE;
			}
			else {
				if (random(3)) {
					if (EnemyBullet[i].x < Player_x)
						EnemyBullet[i].x++;
					else
						EnemyBullet[i].x--;
				}
				EnemyBullet[i].y++;
				DrawEnemyBullet(i);
			}
		}
	}
}

void EnemyCrash() { // Player 총알에 적 총알이 맞는 경우.
	int i;
	for (i = 0; i < MAXENEMY; i++) {
		if (Enemy[i].exist == FALSE || Enemy[i].type == -1) {
			continue;
		}
		if (Enemy[i].y == Bullet[i].y && abs(Enemy[i].x - Bullet[i].x) <= 7) {
			gotoxy(Bullet[i].x, Bullet[i].y); printf(" ");
			Bullet[i].exist = FALSE;
			Enemy[i].type = -1;

			gotoxy(Enemy[i].x - 3, Enemy[i].y);
			printf(" +10 ");
			Score += 10;
			Enemy[i].nFrame = Enemy[i].nStay = 50;
			break;
		}
	}
}

void PlayerCrash() { // 적 총알에 Player 동체가 맞는 경우.
	int i;
	for (i = 0; i < MAXENEMYBULLET; i++) {
		if (EnemyBullet[i].exist == FALSE)
			continue;
		if (EnemyBullet[i].y == 39 && abs(EnemyBullet[i].x - Player_x) <= 5) {
			gotoxy(Player_x - 3, 38); printf(" Dead ");
			Sleep(2000);
			system("cls");
			gotoxy(35, 12); printf(" Game Over");
			gotoxy(35, 13); printf(" Score : %d", Score );
			Sleep(1000);
			exit(0);
		}
	}
}


