#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
#include <windows.h>

#define ESC 27
#define EXTENDASCII -32
#define BULLETMAXIMUM 3
#define ENEMYMAXIMUM 15
#define ENEMYBULLETMAXIMUM 20

int Player_x = 30;
int Player_y = 40;
int Bullet_x = -1;
int Bullet_y = -1;
int GameScore = 0;

typedef enum { NOCURSOR, SOLIDCURSOR, NORMALCURSOR } CURSOR_TYPE;
void clrscr();
void gotoxy(int x, int y);
int wherex();
int wherey();
void setcursortype(CURSOR_TYPE c);
void Playerdraw();
void PlayerMove();
void PlayerErase();
void BulletMovement();
void EnemyDrawer();
void BulletDrawer(int i);
void BulletEraser(int i);
void EnemyMovement();
void EnemyBulletVelocity(int i);
void EnemyBulletDrawer(int i);
void EnemyBulletEraser(int i);
void EnemyBulletMovement();

#define delay(n) Sleep(n)                             
#define randomize() srand((unsigned)time(NULL))         
#define random(n) (rand() % (n))                        


#ifndef SKOUT_PROTOTYPE_ONLY

struct {
	BOOL exist;
	int x, y;
}Bullet[BULLETMAXIMUM];

struct {
	BOOL exist;
	int enemytype;
	int x, y;
	int str;
	int gFrame;
	int gStay;
}Enemy[ENEMYMAXIMUM];

char *strEnemy[] = { "〓▽〓","▷ㅇ◁","학Ｆ점","학Ｄ점" ,"^오^" };

struct {
	BOOL exist;
	int x, y;
	int gFrame;
	int gStay;
}EnemyBullet[ENEMYBULLETMAXIMUM];


void clrscr()
{
	system("cls");
}

void gotoxy(int x, int y)
{
	COORD Cur;
	Cur.X = x;
	Cur.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Cur);
}

int wherex()
{
	CONSOLE_SCREEN_BUFFER_INFO BufInfo;

	GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &BufInfo);
	return BufInfo.dwCursorPosition.X;
}

int wherey()
{
	CONSOLE_SCREEN_BUFFER_INFO BufInfo;

	GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &BufInfo);
	return BufInfo.dwCursorPosition.Y;
}

void setcursortype(CURSOR_TYPE c)
{
	CONSOLE_CURSOR_INFO CurInfo;

	switch (c) {
	case NOCURSOR:
		CurInfo.dwSize = 1;
		CurInfo.bVisible = FALSE;
		break;
	case SOLIDCURSOR:
		CurInfo.dwSize = 100;
		CurInfo.bVisible = TRUE;
		break;
	case NORMALCURSOR:
		CurInfo.dwSize = 20;
		CurInfo.bVisible = TRUE;
		break;
	}
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &CurInfo);
}

#endif  

/*===============================================================================================================================================*/

int main(void) {
	setcursortype(NOCURSOR);
	system("mode con:lines=40");
	randomize();
	for (;;) {
		PlayerMove();
		BulletMovement();

		EnemyDrawer();
		EnemyMovement();
		EnemyBulletMovement();

		DestroyEnemy();
		Death();

		delay(100);
	}
	_getch();
	return 0;
}

void Playerdraw() {
	gotoxy(Player_x, 39);
	printf("─Ⅲ─");
}

void PlayerErase() {
	gotoxy(Player_x, 39);
	printf("      ");
}

void PlayerMove() {
	int i;
	char ch;
	if (GetAsyncKeyState(VK_LEFT) < 0 && Player_x > 1) {
		PlayerErase();
		Player_x--;
		Playerdraw();
	}
	else if (GetAsyncKeyState(VK_RIGHT) < 0 && Player_x < 47) {
		PlayerErase();
		Player_x++;
		Playerdraw();
	}
	if (_kbhit()) {
		ch = _getch();
		switch (ch) {
		case ' ':
			for (i = 0; i < BULLETMAXIMUM && Bullet[i].exist == TRUE; i++) { ; }
			if (i != BULLETMAXIMUM) {
				Bullet[i].x = Player_x + 3;
				Bullet[i].y = 38;
				Bullet[i].exist = TRUE;
			}
			break;
		case ESC:
			exit(0);
		}
	}
}

void BulletMovement() {
	int i;
	for (i = 0; i < BULLETMAXIMUM; i++) {
		if (Bullet[i].exist == TRUE){
			BulletEraser(i);
			if (Bullet[i].y == 0) {
				Bullet[i].exist = FALSE;
			}
			else {
				Bullet[i].y--;
				BulletDrawer(i);
			}
		}
	}
}

void BulletDrawer(int i) {
	gotoxy(Bullet[i].x, Bullet[i].y);
	printf("│");
}

void BulletEraser(int i) {
	gotoxy(Bullet[i].x, Bullet[i].y);
	printf("  ");
}

void EnemyDrawer() {
	BOOL Found;
	int i, j;
	if (random(100) == 0) {
		for (i = 0; i < ENEMYMAXIMUM && Enemy[i].exist == TRUE; i++) { ; }
		if (i != ENEMYMAXIMUM) {
			if (random(2) == 0) {
				Enemy[i].x = 5;
				Enemy[i].str = 1;
			}
			else {
				Enemy[i].x = 45;
				Enemy[i].str = -1;
			}
			for (;;) {
				Enemy[i].y = random(10) + 1;
				for (Found = FALSE, j = 0; j < ENEMYMAXIMUM; j++) {
					if (Enemy[i].exist == TRUE && Enemy[j].y == Enemy[i].y) {
						Found = TRUE;
						break;
					}
				}
				if (Found == FALSE) break;
			}
			Enemy[i].gFrame = Enemy[i].gStay = random(6) + 1;
			Enemy[i].enemytype = random(sizeof(strEnemy)) / sizeof(strEnemy[0]);
			Enemy[i].exist = TRUE;
		}
	}
}

void EnemyMovement() {
	int i;
	for (i = 0; i < ENEMYMAXIMUM; i++) {
		if (Enemy[i].exist == FALSE) continue;
		if (--Enemy[i].gStay == 0) {
			if (Enemy[i].enemytype == -1) {
				gotoxy(Enemy[i].x - 3, Enemy[i].y); 
				printf("            ");
				gotoxy(Enemy[i].x - 3, Enemy[i].y - 1); 
				printf("            ");
				gotoxy(Enemy[i].x - 3, Enemy[i].y - 2);
				printf("            ");
				Enemy[i].exist = FALSE;
				continue;
			}
			Enemy[i].gStay = Enemy[i].gFrame;
			if (Enemy[i].x > 47 || Enemy[i].x < 4) {
				Enemy[i].exist == FALSE;
				gotoxy(Enemy[i].x - 3, Enemy[i].y);
				printf("         ");
			}
			else {
				Enemy[i].x += Enemy[i].str;
				gotoxy(--Enemy[i].x, Enemy[i].y);
				printf(strEnemy[Enemy[i].enemytype]);
				EnemyBulletVelocity(i);
			}
		}
	}
}
void EnemyBulletVelocity(int i) {
	int j;
	if (random(20) == 0); {
		for (j = 0; j < ENEMYBULLETMAXIMUM && EnemyBullet[j].exist == TRUE; j++) { ; }
		if (j != ENEMYBULLETMAXIMUM) {
			EnemyBullet[j].x = Enemy[i].x + 2;
			EnemyBullet[j].y = Enemy[i].y + 1;
			EnemyBullet[j].gFrame = EnemyBullet[j].gStay = Enemy[i].gFrame * 6;
			EnemyBullet[j].exist = TRUE;
		}
	}
}

void EnemyBulletDrawer(int i) {
	gotoxy(EnemyBullet[i].x, EnemyBullet[i].y);
	printf("↓");
}

void EnemyBulletEraser(int i) {
	gotoxy(EnemyBullet[i].x, EnemyBullet[i].y);
	printf("   ");
}

void EnemyBulletMovement() {
	int i;
	for (i = 0; i < ENEMYBULLETMAXIMUM; i++) {
		if (EnemyBullet[i].exist == FALSE) continue;
		if (--EnemyBullet[i].gStay == 0) {
			EnemyBullet[i].gStay = EnemyBullet[i].gFrame;
			EnemyBulletEraser(i);
			if (EnemyBullet[i].y>38) {
				EnemyBullet[i].exist = FALSE;
			}
			else {
				if (random(3)) {
					if (EnemyBullet[i].x < Player_x) EnemyBullet[i].x++;
					else EnemyBullet[i].x--;
				}
				EnemyBullet[i].y++;
				EnemyBulletDrawer(i);
			}
		}
	}
}

void DestroyEnemy() {
	int i;
	for (i = 0; i < ENEMYMAXIMUM; i++) {
		if ((Enemy[i].exist == FALSE) || (Enemy[i].enemytype == -1)) continue;
		if (Enemy[i].y == Bullet[i].y && abs(Enemy[i].x - Bullet[i].x <= 7)) {
			gotoxy(Bullet[i].x, Bullet[i].y); printf(" ");
			Bullet[i].exist = FALSE;
			Enemy[i].enemytype = -1;
			GameScore += 10;
			Enemy[i].gFrame = Enemy[i].gStay = 50;
			break;
		}
		
	}
	
}

void Death() {
	int i;
	for (i = 0; i < ENEMYBULLETMAXIMUM; i++) {
		if (EnemyBullet[i].exist == FALSE) continue;
		if (EnemyBullet[i].y == 39 && abs(EnemyBullet[i].x - Player_x) <= 5) {
			delay(2000);
			clrscr();
			gotoxy(35, 12); printf(" Game Over ");
			delay(2000);
			printf("%d", GameScore);
			exit(0);
		}
	}
}
